// Generated by view binder compiler. Do not edit!
package top.easterNday.settings.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import top.easterNday.settings.R;

public final class UpdateRowItemBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final Button updateAction;

  @NonNull
  public final TextView updateDate;

  @NonNull
  public final ImageButton updateMenu;

  @NonNull
  public final ProgressBar updateProgressBar;

  @NonNull
  public final LinearLayout updateProgressContainer;

  @NonNull
  public final TextView updateProgressPercent;

  @NonNull
  public final TextView updateProgressText;

  @NonNull
  public final TextView updateSize;

  @NonNull
  public final TextView updateTag;

  @NonNull
  public final TextView updateTitle;

  @NonNull
  public final TextView updateVersion;

  private UpdateRowItemBinding(@NonNull CardView rootView, @NonNull Button updateAction,
      @NonNull TextView updateDate, @NonNull ImageButton updateMenu,
      @NonNull ProgressBar updateProgressBar, @NonNull LinearLayout updateProgressContainer,
      @NonNull TextView updateProgressPercent, @NonNull TextView updateProgressText,
      @NonNull TextView updateSize, @NonNull TextView updateTag, @NonNull TextView updateTitle,
      @NonNull TextView updateVersion) {
    this.rootView = rootView;
    this.updateAction = updateAction;
    this.updateDate = updateDate;
    this.updateMenu = updateMenu;
    this.updateProgressBar = updateProgressBar;
    this.updateProgressContainer = updateProgressContainer;
    this.updateProgressPercent = updateProgressPercent;
    this.updateProgressText = updateProgressText;
    this.updateSize = updateSize;
    this.updateTag = updateTag;
    this.updateTitle = updateTitle;
    this.updateVersion = updateVersion;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static UpdateRowItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UpdateRowItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.update_row_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UpdateRowItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.updateAction;
      Button updateAction = ViewBindings.findChildViewById(rootView, id);
      if (updateAction == null) {
        break missingId;
      }

      id = R.id.updateDate;
      TextView updateDate = ViewBindings.findChildViewById(rootView, id);
      if (updateDate == null) {
        break missingId;
      }

      id = R.id.updateMenu;
      ImageButton updateMenu = ViewBindings.findChildViewById(rootView, id);
      if (updateMenu == null) {
        break missingId;
      }

      id = R.id.update_progress_bar;
      ProgressBar updateProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (updateProgressBar == null) {
        break missingId;
      }

      id = R.id.update_progress_container;
      LinearLayout updateProgressContainer = ViewBindings.findChildViewById(rootView, id);
      if (updateProgressContainer == null) {
        break missingId;
      }

      id = R.id.update_progress_percent;
      TextView updateProgressPercent = ViewBindings.findChildViewById(rootView, id);
      if (updateProgressPercent == null) {
        break missingId;
      }

      id = R.id.update_progress_text;
      TextView updateProgressText = ViewBindings.findChildViewById(rootView, id);
      if (updateProgressText == null) {
        break missingId;
      }

      id = R.id.updateSize;
      TextView updateSize = ViewBindings.findChildViewById(rootView, id);
      if (updateSize == null) {
        break missingId;
      }

      id = R.id.updateTag;
      TextView updateTag = ViewBindings.findChildViewById(rootView, id);
      if (updateTag == null) {
        break missingId;
      }

      id = R.id.updateTitle;
      TextView updateTitle = ViewBindings.findChildViewById(rootView, id);
      if (updateTitle == null) {
        break missingId;
      }

      id = R.id.updateVersion;
      TextView updateVersion = ViewBindings.findChildViewById(rootView, id);
      if (updateVersion == null) {
        break missingId;
      }

      return new UpdateRowItemBinding((CardView) rootView, updateAction, updateDate, updateMenu,
          updateProgressBar, updateProgressContainer, updateProgressPercent, updateProgressText,
          updateSize, updateTag, updateTitle, updateVersion);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
